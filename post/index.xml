<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Kevin&#39;s Blog</title>
    <link>https://kevintrejos.github.io/post/</link>
    <description>Recent content in Posts on Kevin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020, Kevin Trejos</copyright>
    <lastBuildDate>Wed, 16 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kevintrejos.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Blog 2: A Simplified Look at What Multimember Congressional Districts Would Look Like In Floriida</title>
      <link>https://kevintrejos.github.io/post/blog-2/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kevintrejos.github.io/post/blog-2/</guid>
      <description>Multimember Congressional Districts In Florida Introduction One of the things that has fascinated me the most about U.S. Politics versus the rest of the world is how our elections work. No, I am not referring to our wonky electoral college system, but rather our preferred voting systed: First-Past-The-Post Single member districts. All across the country, almost every single election is won by a candidate receiving the pluraluty of votes (or sometimes even a majority is required, how exciting!</description>
    </item>
    
    <item>
      <title>Why Data Is Not Everything</title>
      <link>https://kevintrejos.github.io/post/2020-12-16-why-data-is-not-everything/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kevintrejos.github.io/post/2020-12-16-why-data-is-not-everything/</guid>
      <description>Why Data Is Not Everything Introduction  Everyone knows the importance data has on our everyday life. It dictates how our world in run and increasingly how literally everything works thanks to machine learning. However, anyone who has worked in the world of data and statistics, knows that it has limits. How limited is data? Well that is determined by how good the collection of it is.
 In Politics  Take the case of the 2016 Election, where every major political statistician had predicted a landslide Hillary Clinton win.</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://kevintrejos.github.io/post/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kevintrejos.github.io/post/emoji-support/</guid>
      <description>&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://kevintrejos.github.io/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://kevintrejos.github.io/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://kevintrejos.github.io/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://kevintrejos.github.io/post/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://kevintrejos.github.io/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://kevintrejos.github.io/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://kevintrejos.github.io/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://kevintrejos.github.io/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>
